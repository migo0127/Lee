<?php
/*
    二、遞歸(思想)算法：
        - 是把問題轉化為規模縮小的同類問題的子問題，然後遞歸調用函數(或過程)來表示
          問題的解。
        - 遞歸的分析：
            1.簡化問題：找到最優子問題(不能再小)。
            2.函數自己調用自己。

        - 斐波那契數列：1 1 3 5 8 13 .....
        - 需求：求指定位置的數列的值。
        - 規律：
            - 第一位和第二位都為 1，第三位開始為前兩位之和。
            => F(N) = F(N-1) + F(N-2);
            => F(N-1) = F(N-2) + F(N-3);
            .....
            直到找到最優子問題，無法在小：
            => F(2) = F(1) = 1;
*/
// 斐波那契數列： 1 1 3 5 8 13 .....
// 求出指定數對應的值

// 遞歸思想算法：
function my_recursion($n){
    // 判斷當$n為第一位及第二位時，直接返回值為 1
    if($n == 1 || $n == 2){
        return 1;
    }

    // $n為第三位開始時，才進入遞歸算法，找到最優子問題
    // 透過函數調用函數(回調函數)的方式，重覆回調到 $n==1 || $n==2 時停止
    return my_recursion($n-1) + my_recursion($n-2);
}

echo (my_recursion(15));

echo"<br /><br />";

echo (my_recursion(20));

echo"<br /><br />";

echo (my_recursion(2));
<?php
/*
    查找算法：
        - 查找是在大量的信息中尋找一個特定的信息元素，在計算機應用中，查找是常用的基
          本運算。
        - 查找算法是指實現查找過程對應的代碼結果。
        - 就是中大型陣列中去快速定位想要的元素。

        - 查找算法有兩種方式：

            (一).順序查找算法：
                - 也稱為線性查找，從數據結構線性表的一端開始，順序掃描，依次將掃描到
                  的結點關鍵字與給定值k相比較，若相等則表示查找成功，若掃描結束仍沒
                  有找到關鍵值等於k的結點，表示查找失敗。

            (二).二分查找法(常用)：
                - 要求線性表中的結點按鍵字值升序或降序排列，用給定值k先與中間結點的關
                  鍵字比較，中間結點把線性表分成兩個子表，若相等則查找成功，若不相等，
                  再根據k與該中間結點關鍵字的比較結果確定下一步查找哪個子表，這樣遞歸
                  進行，直到查找到或查找結束發現表中沒有這樣的結點。
*/
// 查找算法：
# (一).順序查找算法：從陣列第一個元素開始，挨個匹配
$arr = array(17,37,50,78,99,110,200);

# 1.創建自定義函數挨個尋找
function check_order($arr,$num){
    # 1-1.全部匹配
    for($i = 0,$len = count($arr) ; $i < $len; $i++){
        # 1-2.判斷是否相等
        if($arr[$i] === $num){
            # 1-3.返回下標
            return $i;
        }
    }
     # 2. 沒找到則返回false
     return false;
}

var_dump(check_order($arr,5)); # 在$arr中查找是否有 5 這個值，並返回下標
# bool(false)

echo "<br /><br />";

var_dump(check_order($arr,110)); # 在$arr中查找是否有110這個值，並返回下標
# int(5) => 下標[5]


echo "<hr />";

// (二).二分查找法：
$arr2 = array(17,37,50,78,99,110,200);

# 1.創建一個自定義函數
function check_break($arr,$res){

    # 2.確認陣列的最左及最右邊界的下標(就是索引陣列的長度範圍)
    $right = count($arr);
    $left = 0;

    # 3.循環匹配，條件為 左邊邊界小於右邊邊界時，就繼續執行循環
    while($left <= $right){

        # 3-1.找到中間結點的下標
        /*
            注意：
                若是寫 $right - $left ，就會造成中間結點的下標往左偏移
                EX：
                    邊界為 4 ~ 7 => 4、5、6、7  (floor無條件捨去)
                    中間結點下標應該為 5 ，但若是使用 $right - $left
                    (7 - 4) / 2 = 1 => 計算結果就變成中間節點下邊為 1，往左偏移了
                    故需要使用  $right + $left 的方式來獲取中間結點的下標
                    (7 + 4 ) / 2 = 5
        */
        $middle = floor(($right + $left) / 2);

        # 4.開始匹配
        if($arr[$middle] === $res){
            # 4-1.匹配相等時，返回$middle的下標
            return $middle;
        }

        # 5-1.若是 $res 大於 中間下標，表示再右邊，要移動左邊邊界，縮小範圍，重新循環
        if($arr[$middle] < $res){
            $left = $middle + 1;
        }else{
            # 5-2.否則 $res 小於 中間結點，表示再左邊，要移動右邊邊界，縮小範圍，重新循環
            $right = $middle - 1;
        }
    }
    # 6.若都沒有找到，則返回 false
    return false;
}

var_dump(check_break($arr,53));

echo "<br /><br />";

var_dump(check_order($arr,200));